const readline = require('readline');
const mysql = require('mysql2/promise');
const dbConfig = require('./bd/config');
const { fetchBasicaProducts } = require('./bd/basica');
const { fetchPromesaProducts } = require('./bd/promesa');
const { fetchPoolProducts, pool } = require('./bd/agrupamiento');

async function getAllProducts() {
    console.log("\n===============================================================\n");

    console.log("\nüîπ Obteniendo productos...");

    console.log("\n---------------------------------------------------------------\n");

    const inicioTotal = performance.now();
    let basicaResults, promesasResults, poolResults;
    let tiempoBasica = 0, tiempoPromesa = 0, tiempoPooling = 0;

    try {
        // üìå Obtener productos con conexi√≥n B√ÅSICA
        //console.log("\nüî∏ Ejecutando consulta con conexi√≥n B√ÅSICA...");
        const inicioBasica = performance.now();
        basicaResults = await fetchBasicaProducts();
        tiempoBasica = performance.now() - inicioBasica;

        console.log("\n---------------------------------------------------------------\n");

        // üìå Obtener productos con conexi√≥n PROMESA
        //console.log("\nüî∏ Ejecutando consulta con conexi√≥n PROMESA...");
        const inicioPromesa = performance.now();
        promesasResults = await fetchPromesaProducts();
        tiempoPromesa = performance.now() - inicioPromesa;

        console.log("\n---------------------------------------------------------------\n");

        // üìå Obtener productos con conexi√≥n POOLING
        //console.log("\nüî∏ Ejecutando consulta con conexi√≥n POOLING...");
        const inicioPooling = performance.now();
        poolResults = await fetchPoolProducts();
        tiempoPooling = performance.now() - inicioPooling;

        console.log("\n---------------------------------------------------------------\n");

        // üìã Resumen
        console.log("\nüìã Resumen de datos obtenidos:");
        console.log(`   üîπ Productos obtenidos desde B√ÅSICA: ${basicaResults.length}`);
        console.log(`   üîπ Productos obtenidos desde PROMESA: ${promesasResults.length}`);
        console.log(`   üîπ Productos obtenidos desde AGRUPAMIENTO: ${poolResults.length}`);

        console.log("\n---------------------------------------------------------------\n");

        // ‚è±Ô∏è Tiempos de ejecuci√≥n
        console.log("\n‚è±Ô∏è Tiempos de ejecuci√≥n:");
        console.log(`   üîπ B√°sica:  ${tiempoBasica.toFixed(3)} ms`);
        console.log(`   üîπ Promesa: ${tiempoPromesa.toFixed(3)} ms`);
        console.log(`   üîπ Pooling: ${tiempoPooling.toFixed(3)} ms`);
        console.log(`   ‚è≥ Tiempo total de ejecuci√≥n: ${(performance.now() - inicioTotal).toFixed(3)} ms`);

    } catch (error) {
        console.error('‚ùå Error en la consulta:', error.message);
    } finally {
        await pool.end();
        console.log("\n---------------------------------------------------------------");
        console.log("\nüîí AGRUPAMIENTO de conexiones cerrado correctamente.");
        console.log("\n===============================================================");
    }
}

// üìå Funci√≥n para agregar un nuevo producto
async function addProduct(nombre, apellidoP, apellidoM, ci, ocupacion) {
    console.log("\n===============================================================\n");
    console.log("\nüìå Agregando un nuevo producto...");

    try {
        const connection = await mysql.createConnection(dbConfig);
        const query = 'INSERT INTO productos (nombre, apellidoP, apellidoM, ci, ocupacion) VALUES (?, ?, ?, ?, ?)';
        const [result] = await connection.execute(query, [nombre, apellidoP, apellidoM, ci, ocupacion]);
        console.log(`\n‚úÖ Producto agregado con ID: ${result.insertId}`);
        await connection.end();
    } catch (error) {
        console.error('\n‚ùå Error al agregar producto:', error.message);
    }

    console.log("\n===============================================================");
}

// üìå Funci√≥n para eliminar un producto
async function deleteProduct(id) {
    console.log("\n===============================================================");
    console.log(`\nüìå Eliminando producto con ID: ${id}`);

    try {
        const connection = await mysql.createConnection(dbConfig);
        const query = 'DELETE FROM productos WHERE ID = ?';
        const [result] = await connection.execute(query, [id]);

        if (result.affectedRows > 0) {
            console.log(`\n‚úÖ Producto con ID ${id} eliminado correctamente.`);
        } else {
            console.log(`\n‚ö†Ô∏è No se encontr√≥ un producto con ID ${id}.`);
        }
        await connection.end();
    } catch (error) {
        console.error('\n‚ùå Error al eliminar producto:', error.message);
    }

    console.log("\n===============================================================");
}

// üìå Interfaz de usuario en la terminal
const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

// üìå Funci√≥n para mostrar men√∫
function showMenu() {
    console.log("\n===============================================================");
    console.log("\nüîπ Selecciona una opci√≥n:");
    console.log("\n---------------------------------------------------------------");
    console.log("1Ô∏è‚É£ - Agregar un producto");
    console.log("2Ô∏è‚É£ - Eliminar un producto");
    console.log("3Ô∏è‚É£ - Ninguno (salir)");
    console.log("\n---------------------------------------------------------------");

    rl.question("\nüëâ Ingresa una opci√≥n: ", async (option) => {
        console.log("\n---------------------------------------------------------------");

        if (option === '1') {
            rl.question("\nüìå Nombre de la Persona: ", (nombre) => {
                rl.question("üìå Apellido Paterno: ", (apellidoP) => {
                    rl.question("üìå Apellido Materno: ", (apellidoM) => {
                        rl.question("üìå CI de la Persona: ", (ci) => {
                            rl.question("üìå Ocupacion: ", async (ocupacion) => {
                                await addProduct(nombre, apellidoP, apellidoM, ci, ocupacion);
                                console.log("\n‚úÖ Producto agregado correctamente.\n");
                                showMenu(); // Volver a mostrar el men√∫
                            });
                        });
                    });
                });
            });
        } else if (option === '2') {
            rl.question("\nüìå Ingresa el ID del producto a eliminar: ", async (id) => {
                await deleteProduct(parseInt(id));
                console.log("\n‚úÖ Producto eliminado correctamente.\n");
                showMenu(); // Volver a mostrar el men√∫
            });
        } else if (option === '3') {
            console.log("\n‚úÖ No se realizaron cambios. Saliendo...");
            console.log("\n===============================================================\n");
            rl.close();
        } else {
            console.log("\n‚ùå Opci√≥n no v√°lida.");
            showMenu(); // Volver a mostrar el men√∫
        }
    });
}

// üìå Ejecutar solo una vez
(async function () {
    await getAllProducts();
    showMenu();
})();
